"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project13ATodoAppAwscdkStack = void 0;
const cdk = require("@aws-cdk/core");
const appsync = require("@aws-cdk/aws-appsync");
const dynamodb = require("@aws-cdk/aws-dynamodb");
const lambda = require("@aws-cdk/aws-lambda");
class Project13ATodoAppAwscdkStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        /// APPSYNC INITIALIZED
        const api = new appsync.GraphqlApi(this, 'TodoGraphqlapi', {
            name: 'Todos graphqlAPI',
            schema: appsync.Schema.fromAsset('graphql/schema.graphql'),
            authorizationConfig: {
                defaultAuthorization: {
                    authorizationType: appsync.AuthorizationType.API_KEY,
                }
            }
        });
        /// LAMBDA - FUNCTION
        const lambdaHandler = new lambda.Function(this, 'lambdaAPIHandler', {
            runtime: lambda.Runtime.NODEJS_14_X,
            code: lambda.Code.fromAsset('lambda'),
            handler: 'main.handler'
        });
        /// DYNAMODB INITIALIZED
        const todosTable = new dynamodb.Table(this, 'dynamoTable', {
            tableName: 'TodosItems',
            partitionKey: {
                name: 'id',
                type: dynamodb.AttributeType.STRING
            }
        });
        /// ACCESS TABLE FROM LAMBDA
        todosTable.grantFullAccess(lambdaHandler);
        ///  ADD EVRIOMENTAL VARIABLE 
        lambdaHandler.addEnvironment('TODOS_TABLE', todosTable.tableName);
        /// LAMBDA as a DATASOURCE
        const lambdaDS = api.addLambdaDataSource("lambdaDATASOURCE", lambdaHandler);
        /// APPSYNC - RESOLVERS
        lambdaDS.createResolver({
            typeName: 'Query',
            fieldName: 'allTodos'
        });
        lambdaDS.createResolver({
            typeName: 'Mutation',
            fieldName: 'createTodo'
        });
        lambdaDS.createResolver({
            typeName: 'Mutation',
            fieldName: 'deleteTodo'
        });
    }
}
exports.Project13ATodoAppAwscdkStack = Project13ATodoAppAwscdkStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdDEzX2EtdG9kb19hcHAtYXdzY2RrLXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHJvamVjdDEzX2EtdG9kb19hcHAtYXdzY2RrLXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFxQztBQUNyQyxnREFBZ0Q7QUFDaEQsa0RBQWtEO0FBQ2xELDhDQUE4QztBQUU5QyxNQUFhLDRCQUE2QixTQUFRLEdBQUcsQ0FBQyxLQUFLO0lBQ3pELFlBQVksS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDbEUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsdUJBQXVCO1FBQ3ZCLE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDekQsSUFBSSxFQUFFLGtCQUFrQjtZQUN4QixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUM7WUFDMUQsbUJBQW1CLEVBQUU7Z0JBQ25CLG9CQUFvQixFQUFFO29CQUNwQixpQkFBaUIsRUFBRSxPQUFPLENBQUMsaUJBQWlCLENBQUMsT0FBTztpQkFDckQ7YUFDRjtTQUNGLENBQUMsQ0FBQTtRQUVGLHFCQUFxQjtRQUNyQixNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQ2xFLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUNyQyxPQUFPLEVBQUUsY0FBYztTQUN4QixDQUFDLENBQUE7UUFFRix3QkFBd0I7UUFDeEIsTUFBTSxVQUFVLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDekQsU0FBUyxFQUFFLFlBQVk7WUFDdkIsWUFBWSxFQUFFO2dCQUNaLElBQUksRUFBRSxJQUFJO2dCQUNWLElBQUksRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU07YUFDcEM7U0FDRixDQUFDLENBQUE7UUFFRiw0QkFBNEI7UUFDNUIsVUFBVSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUxQyw4QkFBOEI7UUFDOUIsYUFBYSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRWpFLDBCQUEwQjtRQUMxQixNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFNUUsdUJBQXVCO1FBQ3ZCLFFBQVEsQ0FBQyxjQUFjLENBQUM7WUFDdEIsUUFBUSxFQUFFLE9BQU87WUFDakIsU0FBUyxFQUFFLFVBQVU7U0FDdEIsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLGNBQWMsQ0FBQztZQUN0QixRQUFRLEVBQUUsVUFBVTtZQUNwQixTQUFTLEVBQUUsWUFBWTtTQUN4QixDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsY0FBYyxDQUFDO1lBQ3RCLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLFNBQVMsRUFBRSxZQUFZO1NBQ3hCLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQXhERCxvRUF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ0Bhd3MtY2RrL2F3cy1hcHBzeW5jJztcbmltcG9ydCAqIGFzIGR5bmFtb2RiIGZyb20gJ0Bhd3MtY2RrL2F3cy1keW5hbW9kYic7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnQGF3cy1jZGsvYXdzLWxhbWJkYSc7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0MTNBVG9kb0FwcEF3c2Nka1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHByb3BzKTtcblxuICAgIC8vLyBBUFBTWU5DIElOSVRJQUxJWkVEXG4gICAgY29uc3QgYXBpID0gbmV3IGFwcHN5bmMuR3JhcGhxbEFwaSh0aGlzLCAnVG9kb0dyYXBocWxhcGknLCB7XG4gICAgICBuYW1lOiAnVG9kb3MgZ3JhcGhxbEFQSScsXG4gICAgICBzY2hlbWE6IGFwcHN5bmMuU2NoZW1hLmZyb21Bc3NldCgnZ3JhcGhxbC9zY2hlbWEuZ3JhcGhxbCcpLFxuICAgICAgYXV0aG9yaXphdGlvbkNvbmZpZzoge1xuICAgICAgICBkZWZhdWx0QXV0aG9yaXphdGlvbjoge1xuICAgICAgICAgIGF1dGhvcml6YXRpb25UeXBlOiBhcHBzeW5jLkF1dGhvcml6YXRpb25UeXBlLkFQSV9LRVksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8vIExBTUJEQSAtIEZVTkNUSU9OXG4gICAgY29uc3QgbGFtYmRhSGFuZGxlciA9IG5ldyBsYW1iZGEuRnVuY3Rpb24odGhpcywgJ2xhbWJkYUFQSUhhbmRsZXInLCB7XG4gICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcbiAgICAgIGNvZGU6IGxhbWJkYS5Db2RlLmZyb21Bc3NldCgnbGFtYmRhJyksXG4gICAgICBoYW5kbGVyOiAnbWFpbi5oYW5kbGVyJ1xuICAgIH0pXG5cbiAgICAvLy8gRFlOQU1PREIgSU5JVElBTElaRURcbiAgICBjb25zdCB0b2Rvc1RhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKHRoaXMsICdkeW5hbW9UYWJsZScsIHtcbiAgICAgIHRhYmxlTmFtZTogJ1RvZG9zSXRlbXMnLFxuICAgICAgcGFydGl0aW9uS2V5OiB7XG4gICAgICAgIG5hbWU6ICdpZCcsXG4gICAgICAgIHR5cGU6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vLyBBQ0NFU1MgVEFCTEUgRlJPTSBMQU1CREFcbiAgICB0b2Rvc1RhYmxlLmdyYW50RnVsbEFjY2VzcyhsYW1iZGFIYW5kbGVyKTtcblxuICAgIC8vLyAgQUREIEVWUklPTUVOVEFMIFZBUklBQkxFIFxuICAgIGxhbWJkYUhhbmRsZXIuYWRkRW52aXJvbm1lbnQoJ1RPRE9TX1RBQkxFJywgdG9kb3NUYWJsZS50YWJsZU5hbWUpXG5cbiAgICAvLy8gTEFNQkRBIGFzIGEgREFUQVNPVVJDRVxuICAgIGNvbnN0IGxhbWJkYURTID0gYXBpLmFkZExhbWJkYURhdGFTb3VyY2UoXCJsYW1iZGFEQVRBU09VUkNFXCIsIGxhbWJkYUhhbmRsZXIpO1xuXG4gICAgLy8vIEFQUFNZTkMgLSBSRVNPTFZFUlNcbiAgICBsYW1iZGFEUy5jcmVhdGVSZXNvbHZlcih7XG4gICAgICB0eXBlTmFtZTogJ1F1ZXJ5JyxcbiAgICAgIGZpZWxkTmFtZTogJ2FsbFRvZG9zJ1xuICAgIH0pO1xuXG4gICAgbGFtYmRhRFMuY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgdHlwZU5hbWU6ICdNdXRhdGlvbicsXG4gICAgICBmaWVsZE5hbWU6ICdjcmVhdGVUb2RvJ1xuICAgIH0pO1xuXG4gICAgbGFtYmRhRFMuY3JlYXRlUmVzb2x2ZXIoe1xuICAgICAgdHlwZU5hbWU6ICdNdXRhdGlvbicsXG4gICAgICBmaWVsZE5hbWU6ICdkZWxldGVUb2RvJ1xuICAgIH0pO1xuICB9XG59XG4iXX0=